{
  pkg: {
    title: 'Image Manager üèûÔ∏è',
    cmd: {
      open: 'Open Extension',
      reset_settings: 'Reset Settings',
      show_channel: 'Show Output Channel',
      enable_mirror: 'Enable Mirror',
      select_mirror: 'Select Mirror Url',
      select_language: 'Select Language',
      clear_cache: 'Clear Local Cache',
      configure_svgo: 'Configure svgo',
    },
    core: {
      installDependencies: 'Install dependencies',
    },
    debug: {
      enabled: 'Enable debug mode',
      forceInstall: 'Force install dependencies',
    },
    file: {
      root: 'Workspace root',
      exclude: 'Scan images not in exclude (pattern syntax of micromatch)',
      gitignore: 'Exclude images in .gitignore',
      scan: 'Image type to scan',
      confirmDelete: 'Controls whether ask for confirmation when deleting a image',
      revealFileInOsDeeply: 'Enter folder when it is revealed in OS',
      trashAfterProcessing: 'Move image to trash after processing',
    },
    viewer: {
      warningSize: 'If the image size exceeds this value (KB), a warning icon will be displayed in the upper right corner of the image. If the value is 0, no warning will be displayed.',
      showCompressedIcon: 'Show compressed icon in the bottom right corner of the image',
      imageWidth: 'Width of image (px)',
      imageBackgroundColor: 'Image background color',
      imageRendering: 'Image rendering',
      showDetailsOnHover: 'Show image details on hover',
    },
    appearance: {
      theme: 'Theme',
      language: 'Language',
      primaryColor: 'Primary color',
      reducedMotion: 'Reduce animation',
    },
    mirror: {
      enabled: 'Use mirror for downloading dependencies',
      url: 'Mirror url',
    },
    compression: {
      errorRange: 'Error range (KB), exceeding this range is considered an increase in image size after compression',
      keepOriginal: 'Keep original image',
      skipCompressed: 'Skip compressed image',
      quality: 'Image quality',
      fileSuffix: 'File suffix',
      size: 'Image size (x)',
      format: 'Output image format',
      png: {
        compressionLevel: 'Compression level',
      },
      gif: {
        colors: 'Colors',
      },
      svg: {
        compressedAttribute: 'Add "compressed" attribute to svg after compression. Set to null to disable',
        removeDataAttributes: 'Remove data-* attributes from svg. Except data-[{compressedAttribute}]',
      },
    },
    conversion: {
      icoSize: 'Size of ico',
    },
    similarity: {
      precision: 'Determining the precision of image similarity. The smaller the value, the stricter the judgment',
    },
  },
  prompt: {
    cancel: 'Cancel',
    config_changed_tip: 'Config changed',
    compressor_init_fail: 'Install dependencies failed. Please check network',
    deps_init_success: 'Dependencies installed successfully',
    initializing: 'Image Manager Initializing, please wait...',
    initializing_tooltip: 'Downloading necessary dependencies',
    initialized: 'Image Manager Initialized',
    updating: 'Image Manager is updating, please wait...',
    updated: 'Image Manager update completed',
    show_logs: 'Show logs',
    mirror_enabled: 'Mirror enabled. Please reload vscode to take effect',
    reload_now: 'Reload Now',
    mirror_already_enabled: 'Mirror already enabled',
    mirror_selected: 'Mirror Url Selected. Please reload vscode to take effect',
    load_sharp_failed: 'Load core script failed, please retry',
    deps_init_aborted: 'Dependencies install aborted',
    deps_init_timeout: 'Dependencies install timeout, please try to switch mirror',
    current_mirror: 'Current Mirror',
    current_language: 'Current Language',
    clear_cache_success: 'Clear cache success, please reload vscode to take effect',
    cache_not_found: 'Cache not found',
    retry: 'Retry',
    yes: 'Yes',
    no: 'No',
    reset_settings_tip: 'Are you sure you want to reset settings?',
    reset_settings_success: 'Reset successful',
    reset_settings_fail: 'Reset failed',
    cancel_operation_tip: 'Operation canceled',
    registry_mirror: 'Registry Mirror',
    binary_mirror: 'Binary File Mirror',
    cdn_mirror: 'CDN Binary File Mirror',
  },
  core: {
    compress_fail: 'Compress Fail',
    dep_install_fail: 'Dependencies install failed',
    compress_fail_reason_extension: '{0} format is not supported yet',
    compress_fail_reason_unknown: 'Unknown error',
    compress_fail_reason_size: 'Maximum support size {0} MB',
    view_solution: 'View the Solution',
    extension_root: 'Extension Root',
    platform: 'OS platform',
    manual_install_failed: 'Manual install failed. Make sure to install the correct version',
    manual_install_success: 'Manual install success',
    auto_install_success: 'Auto install success',
    dep_cache_dir: 'Dependencies Cache Dir',
    start_manual_install: 'Start manual install dependencies',
    start_auto_install: 'Start auto install dependencies',
    format_not_supported: '{0} format is not supported',
    tip: 'Tip',
    dep_url_tip: 'The following is the manual download dependencies address, if the automatic installation of dependencies fails, please follow the README documentation to manually download the following dependencies, put them in the extension root directory',
    dep_url: 'Dependencies Download Url',
    workspace_changed: 'Workspace root: {0}',
    load_core_script_success: 'Core script loaded successfully',
    load_core_script_fail: 'Core script loaded failed',
    config_changed: '"{0}" Config Changed',
    load_from_cache: 'Dependency already installed, load from cache',
    libvips_diff: 'libvips version is different, copy libvips files to os cache',
    sharp_diff: 'sharp version is different, copy sharp files to os cache',
    version_diff: 'extension version is different from the cached version',
    install_finished: 'Dependencies install process finished',
    trash_error: 'Trash File Error',
    save_cropper_image_error: 'Save cropper image error',
    get_git_staged_error: 'Get git staged file error',
    compress_error: 'Compress error',
    copy_base64_error: 'Copy base64 error',
    covert_base64_error: 'Covert base64 error',
    webview_ready: 'Webview ready',
    post_message_to_webview: 'Post message to webview',
    handler_fn_not_exist: 'Handler function "{0}" dose not exist',
    output_path_not_exist: 'Output path not exist',
    svgo_error_tip: 'Please ensure the svgo configuration is correct',
    file_exist: 'File exist',
    file_not_exist: 'File not exist',
  },
}
